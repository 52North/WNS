<?xml version="1.0"?>
<!-- /***************************************************************
 /"A service by which a client may conduct asynchronous dialogues 
 (message interchanges) with one or more other services. This 
 service is useful when many collaborating services are required 
 to satisfy a client request, and/or when significant delays are 
 involved is satisfying the request. This service was defined 
 under OWS 1.2 in support of SPS operations. WNS has broad 
 applicability in many such multi-service applications.
 
 Copyright (C) 2011 by 52째North Initiative for Geospatial 
 Open Source Software GmbH

 Author: Eike Hinderk J체rrens, 52째North

 Contact: Andreas Wytzisk, 52째North Initiative for Geospatial 
 Open Source Software GmbH,  Martin-Luther-King-Weg 24,
 48155 Muenster, Germany, info@52north.org

 This program is free software; you can redistribute and/or  
 modify it under the terms of the GNU General Public License 
  version 2 as published by the Free Software Foundation.

 This program is distributed in the hope that it will be useful,  
 but WITHOUT ANY WARRANTY; without even the implied warranty of  
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the  
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License 
 along with this program (see gnu-gpl v2.txt); if not, write to  the 
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,  
 Boston, MA 02111-1307, USA or visit the Free Software Foundation's  
 web page, http://www.fsf.org.

 ***************************************************************/ -->

<project name="52North WNS" default="all" basedir=".">
	<description>Creates the 52North WNS</description>


	<!-- =================================================================== -->
	<!-- properties and paths -->
	<!-- =================================================================== -->

	<property file="build.properties" />
	
	<!-- define standard properties -->
	<property name="build" value="${build.pathfix}build" />	
	<property name="build.classpath.jre" value="${JAVA_HOME}/jre/lib" />
	<property name="build.warfile" value="${build.pathfix}${webapp.name}.war" />
	
	<!-- define automatic build properties -->
	<!-- currently read from properties file -->
	<!-- <property name="build.version" value="latest ;-)" /> -->
	<tstamp> 
	  <format property="build.time" pattern="HH:mm d-MMMM-yyyy"/> 
	</tstamp>

	<!-- The path to the daofactory.properties file. When using the exist 
	database DAO Factory (standard) the property file is not needed -->
	<property name="daofactory" value="webapps/${webapp.name}/WEB-INF/conf/daofactory.properties" />

	<!-- Check if the user is installing to tomcat 5 or 6. Version 6 is in use
		 if the tomcat_home/lib folder can be found (is available). Version 5
		 was separating jars into the server/lib and common/lib folders. We need
		 to get the paths to the folders containing the servlet-api.jar and
		 catalina-ant.jar -->
	  <condition property="build.classpath.common" value="${TOMCAT_HOME}/lib" else="${TOMCAT_HOME}/common/lib">
	  	<available file="${TOMCAT_HOME}/lib" type="dir" />
	  </condition>	
	  <condition property="tomcat.server.lib.folder" value="${TOMCAT_HOME}/lib" else="${TOMCAT_HOME}/server/lib">
	  	<available file="${TOMCAT_HOME}/lib" type="dir" />
	  </condition>
	
	<path id="build.classpath">
		<fileset dir="${build.pathfix}lib">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${build.classpath.common}">
			<include name="**/*.jar" />
		</fileset>

		<fileset dir="${build.classpath.jre}">
			<include name="**/*.jar" />
			<include name="*.jar" />
		</fileset>

	</path>

	<!-- Configure the custom Ant tasks for the Manager application -->
	<path id="tomcat.antlib.path">
		<fileset dir="${tomcat.server.lib.folder}" includes="catalina-ant.jar" />
	</path>
	<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="tomcat.antlib.path" />
	<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask" classpathref="tomcat.antlib.path" />


	<!-- =================================================================== -->
	<!-- targets -->
	<!-- =================================================================== -->

	<target name="all" depends="clean, build, copy, war, deploy" description="creates the 52north WNS war file" />

	<target name="clean" description="remove folders and files required for building a previous war file">
		<delete dir="${build}" />
		<delete file="${build.warfile}" />
	</target>

	<!-- =================================================================== -->
	<!-- compile the sourcecode -->
	<!-- =================================================================== -->
	<target name="build" depends="clean">
		<mkdir dir="${build}/WEB-INF/classes" />
		<javac encoding="ISO-8859-1" srcdir="../../src" destdir="${build}/WEB-INF/classes" 
			classpathref="build.classpath" debug="${build.debug}" debuglevel="${build.debuglevel}">
		</javac>
	</target>

	<!-- =================================================================== -->
	<!-- copy everything to the build folder so that the warfile can be created -->
	<!-- =================================================================== -->
	<target name="copy" depends="build">
	
		<!-- test 2011-04-14: is working -->
		<mkdir dir="${build}/WEB-INF/lib" />
		<mkdir dir="${build}/WEB-INF/conf" />
		
		<!-- copy the log4j property file to WEB-INF/classes folder -->
		<copy todir="${build}/WEB-INF/classes" overwrite="true">
			<fileset file="./log4j.properties" />
			<filterset>
				<filter token="loglevel" value="${log.level}" />
				<filter token="logfile" value="${log.file}" />
			</filterset>
		</copy>
		
		<!-- copy the config.xml to WEB-INF/conf -->
		<copy todir="${build}/WEB-INF/conf">
			<fileset file="./config.xml">
			</fileset>
			<filterset>
				<filter token="daofactory" value="${daofactory}" />
				<filter token="dbduration" value="${db.checkdbduration}" />
				<filter token="dbname" value="${db.name}" />
				<filter token="dbpassword" value="${db.password}" />
				<filter token="dburl" value="${db.url}" />
				<filter token="dbusername" value="${db.username}" />
				<filter token="debugmode" value="${wns.debugmode}" />
				<filter token="exceptionlevel" value="${exceptionlevel}" />
				<filter token="tomcathome" value="${TOMCAT_HOME}" />
				<filter token="ttl" value="${wns.ttl}" />
				<filter token="url" value="${deploy.target.url}" />
				<filter token="webappname" value="${webapp.name}" />
			</filterset>
		</copy>
	
		<!-- copy the wns.wsdl to WEB-INF/conf -->
		<copy todir="${build}/WEB-INF/conf">
			<fileset file="./wns.wsdl">
			</fileset>
		</copy>
		

		<!-- copy the libs -->
		<copy toDir="${build}/WEB-INF/lib">
			<fileset dir="${build.pathfix}lib" casesensitive="yes">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		
		
		<!-- copy all example requests/test client -->
		<copy toDir="${build}/" >
			<fileset dir="${build.pathfix}html" casesensitive="yes">
				<include name="**/*.*" />
			</fileset>
			<filterset>
				<filter token="wnsurl" value="${deploy.target.url}/${webapp.name}" />
			</filterset>
		</copy>
		
		<!-- copy all license files and release notes -->
		<copy toDir="${build}/">
			<fileset dir="${build.pathfix}" casesensitive="yes">
				<include name="*.txt" />
			</fileset>
		</copy>
		
		<!-- copy pdf documentation -->
		<copy toDir="${build}/WEB-INF/documentation">
			<fileset dir="${build.pathfix}/doc/howto/" casesensitive="yes">
				<include name="*.pdf" />
			</fileset>
		</copy>

		<!-- copy all OGC schemata -->
		<copy toDir="${build}/WEB-INF/xsd">
			<fileset dir="${build.pathfix}xml/xsd/OGCSchemata" casesensitive="yes">
				<include name="*.xsd" />
			</fileset>
		</copy>
	
		<!-- copy web.xml -->
		<copy toDir="${build}/WEB-INF">
			<fileset file="web.xml" />
			<filterset>
				<filter token="buildversion" value="${build.version}" />
				<filter token="buildtime" value="${build.time}" />
			</filterset>
		</copy>

	</target>

	<!-- =================================================================== -->
	<!-- create war file -->
	<!-- =================================================================== -->
	
	<target name="war" depends="copy">
	<war warfile="${build.warfile}" webxml="${build}/WEB-INF/web.xml" 
		basedir="${build}" />
	</target>
	
	<!-- =================================================================== -->
	<!-- deploy war file -->
	<!-- =================================================================== -->
	
	<target name="deploy" depends="undeploy,war">
		<deploy url="${deploy.target.url}/manager" username="${target.username}"
			password="${target.password}" path="/${webapp.name}" 
			war="${build.warfile}" />
	</target>
	
	<!-- =================================================================== -->
	<!-- undeploy war file -->
	<!-- =================================================================== -->
	<target name="undeploy" description="remove the 52 WNS">
		<undeploy failOnError="false" url="${deploy.target.url}/manager" 
			username="${target.username}" password="${target.password}" 
			path="/${webapp.name}" />
	</target>

</project>
